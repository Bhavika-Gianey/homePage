{"ast":null,"code":"var _jsxFileName = \"/home/rohan/Desktop/amc-website/Frontend/src/components/UpcomingEvents.js\";\nimport React, { useEffect, useState } from 'react';\nexport function Events() {\n  const [events, setEvents] = useState([{\n    name: '',\n    date: '',\n    month: '',\n    year: '',\n    day: '',\n    time: '',\n    venue: ''\n  }]);\n  useEffect(() => {\n    fetch('http://localhost:8080/events').then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n    }).then(jsonRes => setEvents(jsonRes));\n  }); //Logic - Your UI was great!! We need to show just the upcoming events so for that we will fetch the list of events which satisfy following logic....if event's date - today's date >= 0 then show them else dont. Google for more details. \n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, events.map(event => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, event.name))));\n}","map":{"version":3,"sources":["/home/rohan/Desktop/amc-website/Frontend/src/components/UpcomingEvents.js"],"names":["React","useEffect","useState","Events","events","setEvents","name","date","month","year","day","time","venue","fetch","then","res","ok","json","jsonRes","map","event"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAGA,OAAQ,SAASC,MAAT,GAAkB;AAExB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,CAAC;AAEpCI,IAAAA,IAAI,EAAE,EAF8B;AAGpCC,IAAAA,IAAI,EAAE,EAH8B;AAIpCC,IAAAA,KAAK,EAAE,EAJ6B;AAKpCC,IAAAA,IAAI,EAAE,EAL8B;AAMpCC,IAAAA,GAAG,EAAE,EAN+B;AAOpCC,IAAAA,IAAI,EAAE,EAP8B;AAQpCC,IAAAA,KAAK,EAAE;AAR6B,GAAD,CAAD,CAApC;AAWAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,KAAK,CAAC,8BAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAI;AACX,UAAGA,GAAG,CAACC,EAAP,EAAW;AACT,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;AACF,KALD,EAKGH,IALH,CAKQI,OAAO,IAAIb,SAAS,CAACa,OAAD,CAL5B;AAMD,GAPQ,CAAT,CAbwB,CAwBxB;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,MAAM,CAACe,GAAP,CAAWC,KAAK,iBACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACd,IAAX,CADF,CADC,CADH,CADF;AAUD","sourcesContent":["import React, {useEffect, useState} from 'react';\n\n\nexport  function Events() {\n\n  const [events, setEvents] = useState([{\n    \n    name: '', \n    date: '',\n    month: '',\n    year: '',\n    day: '',\n    time: '',\n    venue: ''\n  }])\n\n  useEffect(() => {\n    fetch('http://localhost:8080/events')\n    .then(res => {\n      if(res.ok) {\n        return res.json()\n      }\n    }).then(jsonRes => setEvents(jsonRes))\n  })\n\n\n\n  //Logic - Your UI was great!! We need to show just the upcoming events so for that we will fetch the list of events which satisfy following logic....if event's date - today's date >= 0 then show them else dont. Google for more details. \n\n  return (\n    <div className=\"container\">\n      {events.map(event => (\n      <div>\n        <h1>{event.name}</h1>\n        \n      </div>\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}